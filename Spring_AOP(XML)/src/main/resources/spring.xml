<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 告诉spring注解bean的目录 -->
    <context:component-scan base-package="com.ehome.spring_aop.xml"/>

    <!-- spring mvc 注解驱动 -->
    <mvc:annotation-driven>
        <!-- spring解析返回结果成json -->
        <mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes" value="application/json"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>


    <!-- 先把MyAdvice注册为一个bean -->
    <bean id="myAdviceAspect" class="com.ehome.spring_aop.xml.aspect.MyAdvice"/>
    <aop:config>
        <!-- 定义切入点 -->
        <aop:pointcut id="myAdvicePointCut" expression="execution(* com.ehome.spring_aop.xml.service.impl.*.*(..))"/>
        <!-- 定义切面类,优先级为2 -->
        <aop:aspect id="" ref="myAdviceAspect" order="2">
            <!-- 在切入点myAdvicePointCut中的某个方法之前执行先执行 beforeMethod()方法-->
            <aop:before method="beforeMethod" pointcut-ref="myAdvicePointCut"/>
            <!-- 在切入点myAdvicePointCut中的某个方法执行之后(无论成功与否)再执行 afterMethod()方法-->
            <aop:after method="afterMethod" pointcut-ref="myAdvicePointCut"/>
            <!-- 在切入点myAdvicePointCut中的某个方法成功返回之后再执行 afterReturningMethod()方法-->
            <aop:after-returning method="afterReturningMethod" pointcut-ref="myAdvicePointCut"/>
            <!-- 在切入点myAdvicePointCut中的某个方法前后执行 aroundMethod()方法。注：一般不建议使用Around-->
            <!--<aop:around method="aroundMethod" pointcut-ref="myAdvicePointCut"/>-->
            <!-- 在切入点myAdvicePointCut中的某个方法抛出异常后再执行 afterThrowingMethod()方法-->
            <aop:after-throwing method="afterThrowingMethod" pointcut-ref="myAdvicePointCut"/>
        </aop:aspect>
    </aop:config>

</beans>